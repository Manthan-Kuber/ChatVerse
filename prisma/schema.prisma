generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isOp      Boolean  @default(false)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                             String    @id @default(cuid())
  name                           String?
  email                          String?   @unique
  emailVerified                  DateTime?
  image                          String?
  chatsId                        String?
  isAdmin                        Boolean   @default(false)
  chats                          Chats?    @relation(fields: [chatsId], references: [id])
  accounts                       Account[]
  Chats_Chats_groupAdminIdToUser Chats?    @relation("Chats_groupAdminIdToUser")
  Message_Message_userIdToUser   Message?  @relation("Message_userIdToUser")
  sessions                       Session[]
  Message_MessageToUser          Message[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Chats {
  id            String    @id @default(cuid())
  isGroupChat   Boolean   @default(false)
  chatName      String
  groupAdminId  String?   @unique
  groupAdmin    User?     @relation("Chats_groupAdminIdToUser", fields: [groupAdminId], references: [id])
  messages      Message[]
  messageId     String?   @unique
  latestMessage Message?  @relation("Chats_LatestMessage")
  participants  User[]
  chatImage     String?
}

model Message {
  id                        String   @id
  content                   String
  createdAt                 DateTime
  userId                    String   @unique
  User_Message_userIdToUser User     @relation("Message_userIdToUser", fields: [userId], references: [id])
  User_MessageToUser        User[]
  chatsId                   String   @unique
  chats                     Chats[]
  latestMessageInChat       Chats?   @relation(name: "Chats_LatestMessage", fields: [latestMessageId], references: [id])
  latestMessageId           String   @unique
}
